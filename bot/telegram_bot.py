from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, \
    filters, ContextTypes, CallbackContext, ConversationHandler, CallbackQueryHandler

import logging

from openai_helper import OpenAIClient
from tools import *
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

class GiftBot:
    """Telegram bot for managing birthdays."""
    # –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∏ –º–µ—Ç–æ–¥ start –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    def __init__(self, config: dict, openai: OpenAIClient, google_search: GoogleSearchTool):
        self.config = config
        self.openai = openai 
        self.google_search = google_search
    async def start(self, update: Update, context: CallbackContext) -> None:
        keyboard = [["‚öΩÔ∏è –°–ø–æ—Ä—Ç", "üè† –¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞"], ["üì± –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", "üß∏ –î–ª—è –¥–µ—Ç–µ–π"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –î–ª—è –Ω–∞—á–∞–ª–∞, –¥–∞–≤–∞–π –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å –ø–æ–¥–∞—Ä–∫–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ–¥–∞—Ä–∫–∞.",
            reply_markup=reply_markup)

    async def handle_choice(self, update: Update, context: CallbackContext) -> None:
        choice = update.message.text
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        detailed_prompt = self.get_detailed_prompt(choice)

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å –ø–æ–º–æ—â—å—é OpenAI
        recommendations =  self.openai.get_response(
            detailed_prompt)  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ get_response —Ç–µ–ø–µ—Ä—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π

        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –ø–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Å—Å—ã–ª–æ–∫ —á–µ—Ä–µ–∑ Google CSE
        search_queries = self.google_search.parse_gpt_response(recommendations)
        message_texts = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        for i, query in enumerate(search_queries, start=1):
            results = self.google_search.google_search(query)
            if results:
                # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                result = results[0]
                message_texts.append(f"{i}. {query} - [–°—Å—ã–ª–∫–∞]({result['link']})")
            else:
                message_texts.append(f"{i}. {query} - –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        final_message = "\n".join(message_texts)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–¥–∏–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await context.bot.send_message(chat_id=update.effective_chat.id, text=final_message, parse_mode='Markdown')

    def get_detailed_prompt(self, choice):
        prompts = {
            "‚öΩÔ∏è –°–ø–æ—Ä—Ç": "–ü—Ä–µ–¥–ª–æ–∂–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏–¥–µ–∏ –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –∞–∫—Ç–∏–≤–Ω–æ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è —Å–ø–æ—Ä—Ç–æ–º. –ü—Ä–µ–¥–ª–∞–≥–∞–π –≤–∞—Ä–∏–∞–Ω—Ç—ã –±–µ–∑ '–∏–ª–∏'",
            "üè† –¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞": "–ü—Ä–µ–¥–ª–æ–∂–∏ –∏–¥–µ–∏ –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –¥–æ–º–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è —É—é—Ç–∞. –ü—Ä–µ–¥–ª–∞–≥–∞–π –≤–∞—Ä–∏–∞–Ω—Ç—ã –±–µ–∑ '–∏–ª–∏'.",
            "üì± –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞": "–ß—Ç–æ –º–æ–∂–Ω–æ –ø–æ–¥–∞—Ä–∏—Ç—å –ª—é–±–∏—Ç–µ–ª—é —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏ –∏ –Ω–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π? –ü—Ä–µ–¥–ª–∞–≥–∞–π –≤–∞—Ä–∏–∞–Ω—Ç—ã –±–µ–∑ '–∏–ª–∏' ",
            "üß∏ –î–ª—è –¥–µ—Ç–µ–π": "–ù—É–∂–Ω—ã –∏–¥–µ–∏ –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è –¥–µ—Ç–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –∫–∞–∫ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º–∏, —Ç–∞–∫ –∏ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º–∏. –ü—Ä–µ–¥–ª–∞–≥–∞–π –≤–∞—Ä–∏–∞–Ω—Ç—ã –±–µ–∑ '–∏–ª–∏' "
            
        }
        return prompts.get(choice, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

    def run(self):
        """Runs the bot."""
        application = ApplicationBuilder() \
            .token(self.config['token']) \
            .build()

        category_filters = (
                filters.Regex(r'^‚öΩÔ∏è –°–ø–æ—Ä—Ç$') |
                filters.Regex(r'^üè† –¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞$') |
                filters.Regex(r'^üì± –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞$') |
                filters.Regex(r'^üß∏ –î–ª—è –¥–µ—Ç–µ–π$')
        )
        application.add_handler(CommandHandler('start', self.start))
        application.add_handler(MessageHandler(filters.TEXT & category_filters, self.handle_choice))
        application.run_polling()